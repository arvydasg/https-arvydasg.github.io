<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title><![CDATA[arvydasg.github.io]]></title>
<description><![CDATA[arvydasg.github.io]]></description>
<link>https://arvydasg.github.io/</link>
<lastBuildDate>Mon, 23 Jan 2023 20:59:39 +0200</lastBuildDate>
<item>
  <title><![CDATA[Inventorization Power App]]></title>
  <description><![CDATA[

<figure id="org2f9c012">
<img src="./static/images/powerapp.png" alt="powerapp.png" width="1200px">

</figure>

<div id="outline-container-org7b5c3bd" class="outline-2">
<h2 id="org7b5c3bd">The problem</h2>
<div class="outline-text-2" id="text-org7b5c3bd">
<p>
Many odd, but necessary jobs appear in PKC on a daily basis. This
Saturday I have worked on Inventorization solution for PKC. Since I
got the responsibility to manage invoices of purchased IT items, I
also noticed that there is no system whatsoever of where/when/how many
things arrive to our IT office or how many we hand out to users or
production or how many are being sent to other sites.
</p>

<p>
And then once in a while someone from Finances asks me: Who this
computer belongs to? What inv.nr sticker does it have? Who has this
phone, what are the phone numbers that PKC uses and SO ON.
</p>

<p>
I basically never have the answers, because there was no
documentation.
</p>

<p>
Even a simple excel sheet with all this info written would have been
better than a stack of paper sheets with user info that PKC collected
over 5 or so years.
</p>
</div>
</div>

<div id="outline-container-org176d038" class="outline-2">
<h2 id="org176d038">The solution</h2>
<div class="outline-text-2" id="text-org176d038">
</div>
<div id="outline-container-org04e5bad" class="outline-3">
<h3 id="org04e5bad">First attempt</h3>
<div class="outline-text-3" id="text-org04e5bad">
<p>
I have been looking for a solution for almost a week. My first attempt
was this - <a href="https://www.youtube.com/watch?v=0PtnVvrVTCY&amp;ab_channel=TheMobileSalesEngineer">Check in / out Google Sheets</a>, it worked quite well, I was
about to present it to my Manager, but after 50scans I have figured
out that it’s a paid app. Nope. On a closer look - it was quite
clumpsy to use.
</p>
</div>
</div>

<div id="outline-container-orga0aacba" class="outline-3">
<h3 id="orga0aacba">Second attempt</h3>
<div class="outline-text-3" id="text-orga0aacba">
<p>
Okay, now I thought I found what I need. This excelent example that
uses forms - <a href="https://www.youtube.com/watch?v=cdqEB78cHpw&amp;ab_channel=RandyBennett">Google QR Inventory</a> I was sure will solve my problem, I
just need to tweak it a little. I tweaked, I weaked.. 3 days, I keep
tweaking.. it is too confusing with all these sheets that get
created… + I keep updating my excel data sheet and I don’t see how
this could work.. I need another solution.
</p>
</div>
</div>

<div id="outline-container-orgc80d5e2" class="outline-3">
<h3 id="orgc80d5e2">Third and Final attempt</h3>
<div class="outline-text-3" id="text-orgc80d5e2">
</div>
<div id="outline-container-orgc3249d5" class="outline-4">
<h4 id="orgc3249d5">License</h4>
<div class="outline-text-4" id="text-orgc3249d5">
<p>
I am glad I did not give up after all this work. I was obsessed with a
solution, no matter where I went I was googling about this
inventorization app. I then found <a href="https://developers.google.com/apps-script">Google Apps Script</a> thought okay,
maybe I should look into that… then I came up <a href="https://powerapps.microsoft.com/en-us/">Microsoft Power Apps</a> and
thought wait, is it included in my E3 license? Went to PKC o365 admin
panel, found myself, assigned a the proper license and I can now start
playing with Power apps.
</p>
</div>
</div>

<div id="outline-container-org7b285ab" class="outline-4">
<h4 id="org7b285ab">Extremely Intuitive</h4>
<div class="outline-text-4" id="text-org7b285ab">
<p>
I was shocked that one can create web and phone apps with Wordpress
like interface. Many videos on YouTube of how it can be done… I have
found one that resembled my case and followed it. Build Cloud
Inventory Management App using power apps and SharePoint. 24hours of
intense tweaking and redoing and I have finally made my app. It was
quite simple and intuitive…
</p>

<ul class="org-ul">
<li>Now I can SCAN new inv.nr as well as serial numbers and add new
items AS SOON AS they arrive to our office.</li>
<li>Whenever me or my colleague is handing out equipment from IT
warehouse - they will scan the TTR number and fill out the info to
whom, when the item will be given.</li>
<li>All of the information will be tracked in google list and achieved
on our IT Team sharepoint, so whenever anyone from financses or my
manager needs to review anything - they will be able to comfortably.</li>
</ul>
</div>
</div>
</div>
</div>

<div id="outline-container-orga483d94" class="outline-2">
<h2 id="orga483d94">Conclusion</h2>
<div class="outline-text-2" id="text-orga483d94">
<p>
At first I wasn’t so happy doing “IT warehouse worker” job… after all
I am here to get IT experience, now warehouse experience… BUT I found
a way how I can implement my knowledge and my drive for learning new
things and automating/making processes easier in this situation. I
will continue doing the inventorization part of work, but now with an
app that I have made. :)
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-pkc.html">Pkc</a> </div>]]></description>
  <category><![CDATA[Pkc]]></category>
  <link>https://arvydasg.github.io/2022-08-27-inventorization-power-app.html</link>
  <guid>https://arvydasg.github.io/2022-08-27-inventorization-power-app.html</guid>
  <pubDate>Mon, 23 Jan 2023 19:56:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Uses]]></title>
  <description><![CDATA[
<p>
Stuff that I use. Laptop, text editor, languages etc.
</p>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <link>https://arvydasg.github.io/uses.html</link>
  <guid>https://arvydasg.github.io/uses.html</guid>
  <pubDate>Sun, 22 Jan 2023 18:21:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Projects]]></title>
  <description><![CDATA[
<p>
Some of my projects here with github links.
</p>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/projects.html</link>
  <guid>https://arvydasg.github.io/projects.html</guid>
  <pubDate>Sun, 22 Jan 2023 18:21:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[About]]></title>
  <description><![CDATA[
<p>
Add CV's here both in English and Lithuanian. Encrypt?
</p>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/about.html</link>
  <guid>https://arvydasg.github.io/about.html</guid>
  <pubDate>Sun, 22 Jan 2023 18:21:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Create a Blog with Emacs]]></title>
  <description><![CDATA[

<div id="outline-container-orgc0ad2a0" class="outline-2">
<h2 id="orgc0ad2a0">Intro</h2>
<div class="outline-text-2" id="text-orgc0ad2a0">
<p>
If you are using Emacs and org mode as much as me, you must have come up to
<code>org-publish</code> feature that allows you to convert org files to html.
</p>

<p>
When you have a lot of org files - means you can have a lot of html
files. When you have a lot of html files - you can have your own
static website ;)
</p>
</div>
</div>

<div id="outline-container-org957c27b" class="outline-2">
<h2 id="org957c27b">Create Emacs blog the "System Crafters" way</h2>
<div class="outline-text-2" id="text-org957c27b">
<p>
Best description in a video format is <a href="https://www.youtube.com/watch?v=AfkrzFodoNw&amp;t=1612s&amp;ab_channel=SystemCrafters">here</a>. To later publish it
automaticall,y video <a href="https://www.youtube.com/watch?v=za99DwdZEyg&amp;t=996s&amp;ab_channel=SystemCrafters">here</a>.
</p>
</div>
<div id="outline-container-org4ab8f8f" class="outline-3">
<h3 id="org4ab8f8f">Choose a directory</h3>
<div class="outline-text-3" id="text-org4ab8f8f">
<p>
You will place your org files inside content/ directory.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">/home/arvydas/Dropbox/src/sites/my-org-site/content/
</pre>
</div>
</div>
</div>

<div id="outline-container-org37ab428" class="outline-3">
<h3 id="org37ab428">Creating the build script</h3>
<div class="outline-text-3" id="text-org37ab428">
</div>
<div id="outline-container-orgd3962a5" class="outline-4">
<h4 id="orgd3962a5">build-site.el</h4>
<div class="outline-text-4" id="text-orgd3962a5">
<p>
Inside of this directory:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">/home/arvydas/Dropbox/src/sites/my-org-site/
</pre>
</div>

<p>
Create a file called <code>build-site.el</code> with this inside of it.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #928374;">;; </span><span style="color: #928374;">Load the publishing system</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">require</span> '<span style="color: #d3869b;">ox-publish</span><span style="color: #fe8019;">)</span>

<span style="color: #fe8019;">(</span>message <span style="color: #b8bb26;">"Build complete!"</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Define the publishing project</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> org-publish-project-alist
      <span style="color: #cc241d;">(</span>list
       <span style="color: #b8bb26;">(</span>list <span style="color: #b8bb26;">"my-org-site"</span>
             <span style="color: #fe8019;">:recursive</span> t
             <span style="color: #fe8019;">:base-directory</span> <span style="color: #b8bb26;">"./content"</span>
             <span style="color: #fe8019;">:publishing-directory</span> <span style="color: #b8bb26;">"./public"</span>
             <span style="color: #fe8019;">:publishing-function</span> 'org-html-publish-to-html<span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Generate the site output</span>
<span style="color: #fe8019;">(</span>org-publish-all t<span style="color: #fe8019;">)</span>
</pre>
</div>

<p>
This configures the <i>org-publish-project-alist</i> variable to define a
publishing project for our site. Read the documentation of this
variable using M-x describe-variable for a lot more information!
</p>
</div>
</div>

<div id="outline-container-orga1972b9" class="outline-4">
<h4 id="orga1972b9">build.sh</h4>
<div class="outline-text-4" id="text-orga1972b9">
<p>
We also need a shell script that can run our Emacs Lisp script. We'll call that build.sh:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">#!/bin/sh
emacs -Q --script build-site.el
</pre>
</div>

<p>
Don't forget to use <code>chmod +x build.sh</code> to make the script executable!
</p>

<p>
NOTE: If you're on Windows, you can create a <code>build.cmd</code> file that
invokes Emacs the same way.
</p>

<p>
The -Q parameter prevents Emacs from loading your own Emacs
configuration which will help ensure that this same script can be
executed cleanly on other machines once we get ready to start
publishing this site.
</p>

<p>
Create one org file, in the content dir, run the shell script, see the
html in public folder, open it in the browser.
</p>
</div>
</div>
</div>

<div id="outline-container-orgca689c0" class="outline-3">
<h3 id="orgca689c0">Improving the HTML output</h3>
<div class="outline-text-3" id="text-orgca689c0">
<p>
There are a few things about the page we just looked at that I'd like
to change to make the output look a bit cleaner:
</p>

<ul class="org-ul">
<li>Section numbers</li>
<li>Author name</li>
<li>Publish timestamp</li>
<li>Validate link</li>
</ul>

<p>
Luckily the publish system is very customizable so I'll show you how
we can disable a few things in the project configuration to get a
better result.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #928374;">;; </span><span style="color: #928374;">Define the publishing project</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> org-publish-project-alist
      <span style="color: #cc241d;">(</span>list
       <span style="color: #b8bb26;">(</span>list <span style="color: #b8bb26;">"org-site:main"</span>
             <span style="color: #fe8019;">:recursive</span> t
             <span style="color: #fe8019;">:base-directory</span> <span style="color: #b8bb26;">"./content"</span>
             <span style="color: #fe8019;">:publishing-function</span> 'org-html-publish-to-html
             <span style="color: #fe8019;">:publishing-directory</span> <span style="color: #b8bb26;">"./public"</span>
             <span style="color: #fe8019;">:with-author</span> nil           <span style="color: #928374;">;; </span><span style="color: #928374;">Don't include author name</span>
             <span style="color: #fe8019;">:with-creator</span> t            <span style="color: #928374;">;; </span><span style="color: #928374;">Include Emacs and Org versions in footer</span>
             <span style="color: #fe8019;">:with-toc</span> t                <span style="color: #928374;">;; </span><span style="color: #928374;">Include a table of contents</span>
             <span style="color: #fe8019;">:section-numbers</span> nil       <span style="color: #928374;">;; </span><span style="color: #928374;">Don't include section numbers</span>
             <span style="color: #fe8019;">:time-stamp-file</span> nil<span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>    <span style="color: #928374;">;; </span><span style="color: #928374;">Don't include time stamp in file</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orgb59105c" class="outline-3">
<h3 id="orgb59105c">Improving the page styling</h3>
<div class="outline-text-3" id="text-orgb59105c">
<p>
At this point have a decent basic output for our website, but what if we want to make it look a little bit nicer?
</p>

<p>
By setting a few more variables, we can use a nice stylesheet to give our site a more polished look:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #928374;">;; </span><span style="color: #928374;">Customize the HTML output</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> org-html-validation-link nil            <span style="color: #928374;">;; </span><span style="color: #928374;">Don't show validation link</span>
      org-html-head-include-scripts nil       <span style="color: #928374;">;; </span><span style="color: #928374;">Use our own scripts</span>
      org-html-head-include-default-style nil <span style="color: #928374;">;; </span><span style="color: #928374;">Use our own styles</span>
      org-html-head <span style="color: #b8bb26;">"&lt;link rel=\"stylesheet\" href=\"simple.min.css\" /&gt;"</span> <span style="color: #928374;">;</span><span style="color: #928374;">place your own stylesheet in public folder</span>
      org-html-head <span style="color: #b8bb26;">"&lt;link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" /&gt;"</span> <span style="color: #928374;">;</span><span style="color: #928374;">use cdn stylesheet</span>
      <span style="color: #fe8019;">)</span>
</pre>
</div>
</div>
</div>
<div id="outline-container-orge27f288" class="outline-3">
<h3 id="orge27f288">Generating pages with code blocks</h3>
<div class="outline-text-3" id="text-orge27f288">
<p>
So far we've been looking at a very simple example page that doesn't really have much on it. What happens when we try to generate a more elaborate Org file containing code blocks?
</p>

<p>
Let's try it out with another file, a version of my literate Emacs configuration called Emacs.org!
</p>

<p>
If you're generating a site that features code blocks like a coding blog or a literate Emacs configuration, you'll probably see an error like this when you generate the site:
</p>


<p>
Cannot fontify source block (htmlize.el &gt;= 1.34 required)
</p>

<p>
To resolve this issue, you will need to install the htmlize package from MELPA. We can automate the process of installing this package by adding the following snippet to our build-site.el file:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #928374;">;; </span><span style="color: #928374;">Set the package installation directory so that packages aren't stored in the</span>
<span style="color: #928374;">;; </span><span style="color: #928374;">~/.emacs.d/elpa path.</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">require</span> '<span style="color: #d3869b;">package</span><span style="color: #fe8019;">)</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> package-user-dir <span style="color: #cc241d;">(</span>expand-file-name <span style="color: #b8bb26;">"./.packages"</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> package-archives '<span style="color: #cc241d;">(</span><span style="color: #b8bb26;">(</span><span style="color: #b8bb26;">"melpa"</span> . <span style="color: #b8bb26;">"https://melpa.org/packages/"</span><span style="color: #b8bb26;">)</span>
                         <span style="color: #b8bb26;">(</span><span style="color: #b8bb26;">"elpa"</span> . <span style="color: #b8bb26;">"https://elpa.gnu.org/packages/"</span><span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Initialize the package system</span>
<span style="color: #fe8019;">(</span>package-initialize<span style="color: #fe8019;">)</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">unless</span> package-archive-contents
  <span style="color: #cc241d;">(</span>package-refresh-contents<span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Install dependencies</span>
<span style="color: #fe8019;">(</span>package-install 'htmlize<span style="color: #fe8019;">)</span>
</pre>
</div>

<p>
In this snippet, we load Emacs' package manager and configure the package-user-dir to be a sub-directory of our project folder. This allows you to install packages for the script without mixing them up with the packages of your personal Emacs configuration!
</p>

<p>
The next thing we do is add MELPA to the package archive list and refresh the package archive so that htmlize can be found. Finally, we call package-install to install it!
</p>

<p>
In a future video I'll show you how to convert your Emacs color theme to a CSS file that you can use to colorize source blocks with exactly the same colors used in the theme!
</p>
</div>
</div>

<div id="outline-container-orgff92bdb" class="outline-3">
<h3 id="orgff92bdb">Linking between pages</h3>
<div class="outline-text-3" id="text-orgff92bdb">
<p>
One last thing I want to show you is how you can create links between
pages on your site. Let's open up index.org and create a link to the
Emacs.org file.
</p>

<p>
Inside index.org, we can press <code>C-c C-l (org-insert-link)</code>, enter the
path of the Org file we want to link to (./Emacs.org), press Enter,
then enter the text for the link ("My Emacs configuration").
</p>

<p>
When you generate the site again, you should be able to follow the
link between pages because Org's publishing system will convert the
link to the proper output extension.
</p>

<p>
It will also complain when a linked file can't be found!
</p>


<div class="org-src-container">
<pre class="src src-emacs-lisp">Debugger entered--Lisp error: <span style="color: #fe8019;">(</span><span style="color: #fabd2f;">user-error</span> <span style="color: #b8bb26;">"Unable to resolve link: \"Emacs2.org\""</span><span style="color: #fe8019;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org68e9283" class="outline-3">
<h3 id="org68e9283">The final build script</h3>
<div class="outline-text-3" id="text-org68e9283">
<p>
Here is the final form of our <code>build-site.el</code> script:
</p>


<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #928374;">;; </span><span style="color: #928374;">Set the package installation directory so that packages aren't stored in the</span>
<span style="color: #928374;">;; </span><span style="color: #928374;">~/.emacs.d/elpa path.</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">require</span> '<span style="color: #d3869b;">package</span><span style="color: #fe8019;">)</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> package-user-dir <span style="color: #cc241d;">(</span>expand-file-name <span style="color: #b8bb26;">"./.packages"</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> package-archives '<span style="color: #cc241d;">(</span><span style="color: #b8bb26;">(</span><span style="color: #b8bb26;">"melpa"</span> . <span style="color: #b8bb26;">"https://melpa.org/packages/"</span><span style="color: #b8bb26;">)</span>
                         <span style="color: #b8bb26;">(</span><span style="color: #b8bb26;">"elpa"</span> . <span style="color: #b8bb26;">"https://elpa.gnu.org/packages/"</span><span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Initialize the package system</span>
<span style="color: #fe8019;">(</span>package-initialize<span style="color: #fe8019;">)</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">unless</span> package-archive-contents
  <span style="color: #cc241d;">(</span>package-refresh-contents<span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Install dependencies</span>
<span style="color: #fe8019;">(</span>package-install 'htmlize<span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Load the publishing system</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">require</span> '<span style="color: #d3869b;">ox-publish</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Customize the HTML output</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> org-html-validation-link nil            <span style="color: #928374;">;; </span><span style="color: #928374;">Don't show validation link</span>
      org-html-head-include-scripts nil       <span style="color: #928374;">;; </span><span style="color: #928374;">Use our own scripts</span>
      org-html-head-include-default-style nil <span style="color: #928374;">;; </span><span style="color: #928374;">Use our own styles</span>
      org-html-head <span style="color: #b8bb26;">"&lt;link rel=\"stylesheet\" href=\"https://cdn.simplecss.org/simple.min.css\" /&gt;"</span><span style="color: #fe8019;">)</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Define the publishing project</span>
<span style="color: #fe8019;">(</span><span style="color: #fb4934;">setq</span> org-publish-project-alist
      <span style="color: #cc241d;">(</span>list
       <span style="color: #b8bb26;">(</span>list <span style="color: #b8bb26;">"org-site:main"</span>
             <span style="color: #fe8019;">:recursive</span> t
             <span style="color: #fe8019;">:base-directory</span> <span style="color: #b8bb26;">"./content"</span>
             <span style="color: #fe8019;">:publishing-function</span> 'org-html-publish-to-html
             <span style="color: #fe8019;">:publishing-directory</span> <span style="color: #b8bb26;">"./public"</span>
             <span style="color: #fe8019;">:with-author</span> nil           <span style="color: #928374;">;; </span><span style="color: #928374;">Don't include author name</span>
             <span style="color: #fe8019;">:with-creator</span> t            <span style="color: #928374;">;; </span><span style="color: #928374;">Include Emacs and Org versions in footer</span>
             <span style="color: #fe8019;">:with-toc</span> t                <span style="color: #928374;">;; </span><span style="color: #928374;">Include a table of contents</span>
             <span style="color: #fe8019;">:section-numbers</span> nil       <span style="color: #928374;">;; </span><span style="color: #928374;">Don't include section numbers</span>
             <span style="color: #fe8019;">:time-stamp-file</span> nil<span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>    <span style="color: #928374;">;; </span><span style="color: #928374;">Don't include time stamp in file</span>

<span style="color: #928374;">;; </span><span style="color: #928374;">Generate the site output</span>
<span style="color: #fe8019;">(</span>org-publish-all t<span style="color: #fe8019;">)</span>

<span style="color: #fe8019;">(</span>message <span style="color: #b8bb26;">"Build complete!"</span><span style="color: #fe8019;">)</span>

</pre>
</div>
</div>
</div>
</div>

<div id="outline-container-org6a01b17" class="outline-2">
<h2 id="org6a01b17">Create Emacs blog with "org-static-blog" package</h2>
<div class="outline-text-2" id="text-org6a01b17">
<p>
"<a href="https://github.com/bastibe/org-static-blog">org-static-blog</a>" is a package written by <a href="https://github.com/bastibe">Bastian Bechtold</a> is a static site
generator. I believe it started <a href="https://bastibe.de/2013-11-13-blogging-with-emacs.html">here</a>.
</p>

<p>
My current Emacs configuration for "<a href="https://github.com/arvydasg/.emacs.d/blob/master/recipes/org-static-blog.el">org-static-blog</a>" is here.
</p>

<p>
Install the plugin, you get all it's functions. They are
clearly documented within the plugin, it's super easy to read the
instructions and understand what it does. One command
<code>org-static-blog-create-new-post</code> creates new post, then
<code>org-static-blog-publish</code> converts all your .org files to html files in
your chosen location. You push them to github and that's all! Your
site is live.
</p>

<p>
I have just discovered it <span class="timestamp-wrapper"><span class="timestamp">[2023-01-21 Sat]</span></span>, but already like it.
Mainly because it is a simple program that I am able to wrap my head
around and I know it will remain simple and I will be able to use for
a long time in the future, it won't go anywhere. I can also make some
pull requests to it by adding Lithuanian language and some features.
It automatically generates archive file where all the posts are
stored, it also automatically generates tag's file and then in the
browser I can filter my posts.. It is easy to generate header and
footer. Yes, I like it more than the first method.
</p>

<p>
If you would like to add an image to your org file, try this:
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp">#+attr_html: <span style="color: #fe8019;">:width</span> 1200px
#+ATTR_ORG: <span style="color: #fe8019;">:width</span> 600
<span style="color: #fe8019;">[</span><span style="color: #cc241d;">[</span>./static/images/org-static-blog.png<span style="color: #cc241d;">]</span><span style="color: #fe8019;">]</span>
</pre>
</div>


<figure id="org0a518ca">
<img src="./static/images/org-static-blog.png" alt="org-static-blog.png" width="1200px">

</figure>

<p>
lightbox.js that you can see in this page source helps with the lightbox effect that you get when clicking on
the image.
</p>
</div>
</div>

<div id="outline-container-org04de4a2" class="outline-2">
<h2 id="org04de4a2">Conclusion</h2>
<div class="outline-text-2" id="text-org04de4a2">
<p>
Now the only thing is left - I have to blog. :) I am thinking why
don't I whenever learning a new thing write such little summary about
it OR imagine that I am teaching someone this topic. "The best way to
learn it is to teach it" they say.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <link>https://arvydasg.github.io/2023-01-21-create-emacs-blog.html</link>
  <guid>https://arvydasg.github.io/2023-01-21-create-emacs-blog.html</guid>
  <pubDate>Sat, 21 Jan 2023 12:40:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Skelbiu.lt Clone with GET POST DELETE]]></title>
  <description><![CDATA[

<figure id="org4e3ab56">
<img src="./static/images/clone-skelbiu.png" alt="clone-skelbiu.png" width="1200px">

</figure>

<div id="outline-container-org9ea80ab" class="outline-2">
<h2 id="org9ea80ab">Introduction</h2>
<div class="outline-text-2" id="text-org9ea80ab">
<p>
2022-10-13 I had a final front-end part Codeacademy task. I was asked
to use GET, POST and DELETE requests while taking design and layout
inspirations from <a href="https://www.skelbiu.lt/">skelbiu.lt</a>.
</p>

<p>
The goal was not to use any javascript frameworks. I have also used as
much pure html/css as possible, although for the form, I have decided
to use Bootstrap.
</p>

<p>
Here is a live codeacademy task itself - <a href="./static/images/Baigiamoji_uzduotis.pdf">Baigiamoji uzduotis</a>.
</p>
</div>
</div>

<div id="outline-container-orgf0495a0" class="outline-2">
<h2 id="orgf0495a0">The Process</h2>
<div class="outline-text-2" id="text-orgf0495a0">
<ul class="org-ul">
<li>I have started with researching the skelbiu.lt page, figuring out
how much of the cloning I can do from it.</li>
<li>I then created an API for the project with <a href="https://mockapi.io/">mockapi</a> and filled it
with some dummy data.</li>
<li>Using the dummy data I have coded the GET, POST, DELETE requests
with Vanilla Javascrip, not using any frameworks and made sure they
are displayed in the browser.</li>
<li>Assigned localstorage values to each item so I can redirect to individual item pages.</li>
<li>Made sure the styles match those of skelbiu.lt</li>
</ul>
</div>
</div>

<div id="outline-container-orgdf963f7" class="outline-2">
<h2 id="orgdf963f7">Conclusion</h2>
<div class="outline-text-2" id="text-orgdf963f7">
<p>
Here is a link to my <a href="https://arvydas.dev/codeacademy/javascript/skelbiult/index.html">Skelbiu.lt clone</a>(give it a few seconds to load,
this api service can sometimes be slow :) ).
</p>

<p>
Working with API’s, fetchign and updating data is one of the most
intersting things that I have done with JavaScript so far. I am happy
I have learned this skill, I can see many project ideas that can be
done in a similar passion, with API’s and GET, POST requests, I just
wish I had more time to play with these :)
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-codeacademy.html">codeacademy</a> </div>]]></description>
  <category><![CDATA[codeacademy]]></category>
  <link>https://arvydasg.github.io/2022-10-13-Skelbiult-clone.html</link>
  <guid>https://arvydasg.github.io/2022-10-13-Skelbiult-clone.html</guid>
  <pubDate>Thu, 13 Oct 2022 18:27:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[VBA barcode checker]]></title>
  <description><![CDATA[

<figure id="orgbc68336">
<img src="./static/images/vba-barcode-checker.png" alt="vba-barcode-checker.png" width="1200px">

</figure>

<div id="outline-container-org4c6d43d" class="outline-2">
<h2 id="org4c6d43d">A Complaint</h2>
<div class="outline-text-2" id="text-org4c6d43d">
<p>
PKC group has received a complaint regarding one process due to which
nonconformity appeared in some products.
</p>

<p>
I was asked to make something so ensure the nonconformity in the
process does not repeat.
</p>
</div>
</div>

<div id="outline-container-org5f45f11" class="outline-2">
<h2 id="org5f45f11">Estonian Code</h2>
<div class="outline-text-2" id="text-org5f45f11">
<p>
I ended up looking through 12 years old <a href="https://learn.microsoft.com/en-us/dotnet/visual-basic/">VBA</a> code which had no
documentation, most of the code was in Estonian and it’s the developer
did not want to touch his code anymore.
</p>

<p>
I took the challenge, read through the code, saw the connections,
googled a lot and finally added my own pieces of code to get the
desired outcome. I have added a few barcodes to necessary places.
</p>
</div>
</div>

<div id="outline-container-orgc40536e" class="outline-2">
<h2 id="orgc40536e">Created a whole app with a language I have never worked before</h2>
<div class="outline-text-2" id="text-orgc40536e">
<p>
I then created a VBA app to scan those barcodes with and instructed
the shift leaders as well as other employers to use the app.
</p>

<p>
This app was implemented in 3 departments in Panevezys site, there are
plans of launching it in other sites in Lithuania as well.
</p>

<p>
The barcodes scanned with the app had to be made available for Quality
personel to check. I have created a shell script that runs at 13:00 on
a daily basis and copies the needed file from the user machine to a
location on the server so it can be accesssed.
</p>
</div>
</div>

<div id="outline-container-orge8f4345" class="outline-2">
<h2 id="orge8f4345">Conclusion</h2>
<div class="outline-text-2" id="text-orge8f4345">
<p>
During this project I went from not knowing anything about VBA to
coding a fully functional app wiht it that is now used on a daily
basis and helps to prevent future nonconformities that can be made by
packing departments all around PKC.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-pkc.html">pkc</a> </div>]]></description>
  <category><![CDATA[pkc]]></category>
  <link>https://arvydasg.github.io/2022-10-03-vba-barcode-checker.html</link>
  <guid>https://arvydasg.github.io/2022-10-03-vba-barcode-checker.html</guid>
  <pubDate>Mon, 03 Oct 2022 18:18:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[First JavaScript test]]></title>
  <description><![CDATA[

<figure id="org9fdd673">
<img src="./static/images/first-javascript-test.png" alt="first-javascript-test.png" width="1200px">

</figure>

<div id="outline-container-org2110de8" class="outline-2">
<h2 id="org2110de8">2022-09-19</h2>
<div class="outline-text-2" id="text-org2110de8">
<p>
Today, our codeacademy group has received our first TASK.
</p>

<p>
It didn’t seem difficult, but, after the weekended of playing with
Excels VBA, it seemed that I forgot everything that I learned in
JavaScipt.
</p>


<figure id="orgd33d3f3">
<img src="./static/images/first-javascript-test2.png" alt="first-javascript-test2.png" width="1200px">

</figure>
</div>
</div>

<div id="outline-container-org0798c4b" class="outline-2">
<h2 id="org0798c4b">Looking up EVERYTHING</h2>
<div class="outline-text-2" id="text-org0798c4b">
<p>
Honestly, I had to google/look for examples from my own <a href="https://arvydas.dev/codeacademy/javascript/index.html">sources</a> for
each and every task. I managed to complete 95% of those, BUT it didn’t
feel great that I had to keep looking things up. Of course, I have
been learning JavScript only for a month now and I didn’t really build
anything serious projects myself during this month, but still I was
hoping this test to go more smooth.
</p>

<p>
We have 3.5 hours to complete this test, but the first hour or so I
have spent tweaking my Emacs configuration (tern mode), and HTML/CSS
files trying to make the browser to display the arrays in the way I
want. After many unsuccessful attempts I have decided to do what the
task asked and execute the code in the browsers console.
</p>

<p>
After that, I managed to go through the tasks one by one and finish
them in time. Barely ;) The biggest challenge for me was the task 1.4
(adding an object to the array) and task 3 (making the cube get bigger
on each click). BUT, as we got the explanations the next day, they
seemed quite simple.
</p>
</div>
</div>

<div id="outline-container-org3969f56" class="outline-2">
<h2 id="org3969f56">Link to the tasks and my solutions</h2>
<div class="outline-text-2" id="text-org3969f56">
<p>
If you would like to see those tasks and my solutions, please head
<a href="https://arvydas.dev/codeacademy/javascript/index.html#27">here</a> and find “Example numero 27” after pressing Ctrl+F.
</p>
</div>
</div>

<div id="outline-container-orgc064f02" class="outline-2">
<h2 id="orgc064f02">Moral of the story</h2>
<div class="outline-text-2" id="text-orgc064f02">
<p>
The language that you are learning… use it not only during the
classes, but also to build your personal projects in your free time to
ingrain all the syntax and language’s possibilities in your brain.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2022-09-20-first-javascript-test.html</link>
  <guid>https://arvydasg.github.io/2022-09-20-first-javascript-test.html</guid>
  <pubDate>Tue, 20 Sep 2022 20:29:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[CodeAcademy tasks and examples]]></title>
  <description><![CDATA[

<figure id="org16925c9">
<img src="./static/images/codeacademyhtmlcss.png" alt="codeacademyhtmlcss.png" width="1200px">

</figure>

<p>
After a few months of <b>CodeAcademy “Front-end + Python program”</b> course
(2022-07 - 2023.03), I can say that I have repeated a lot of what I
have already knew and been using (HTML,CSS) and I have learned even
more new things with the JavaScript part of the course.
</p>

<p>
As you might know I like to document things… mainly to track my own
progress or just to have things as a reference just int case, or just
to share stuff with others. No matter where I am and what is the task,
I document. It’s quite a lot of work, but sometimes, it pays off -
here is an example <a href="./2022-05-24-pkc-company-wiki.html">PKCwiki</a> ;)
</p>

<p>
This case is no different, I documented everything that I learned
during this course. Most of the tasks, most of the examples, most of
my own experiments during the course.
</p>

<div id="outline-container-orgf76c9de" class="outline-2">
<h2 id="orgf76c9de">JavaScript part 2022-11 - now</h2>
<div class="outline-text-2" id="text-orgf76c9de">
<p>
Python, SQL, Flask
</p>
</div>
</div>
<div id="outline-container-orgac8b954" class="outline-2">
<h2 id="orgac8b954">JavaScript part 2022-09 - 2022-11</h2>
<div class="outline-text-2" id="text-orgac8b954">
<p>
All of the stuff from that part(with code) can be accessed and
inspected Here. Github repo, if needed, is Here.
</p>

<p>
Hope I managed to present my work in a easy to read manner.
</p>
</div>
</div>
<div id="outline-container-org4f07dfc" class="outline-2">
<h2 id="org4f07dfc">HTML/CSS part 2022-07 - 2022-09</h2>
<div class="outline-text-2" id="text-org4f07dfc">
<p>
All of the stuff from that part can be accessed and inspected <a href="https://arvydas.dev/codeacademy/">Here</a>.
Github repo, if needed, is <a href="https://github.com/arvydasg/codeacademy">Here</a>.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2022-08-28-codeacademy-tasks-and-examples.html</link>
  <guid>https://arvydasg.github.io/2022-08-28-codeacademy-tasks-and-examples.html</guid>
  <pubDate>Sun, 28 Aug 2022 20:21:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Python data cleaner with Python]]></title>
  <description><![CDATA[

<figure id="orgc5ea3e2">
<img src="./static/images/phats.png" alt="phats.png" width="1200px">

</figure>

<div id="outline-container-orgc1b657b" class="outline-2">
<h2 id="orgc1b657b">What is it for</h2>
<div class="outline-text-2" id="text-orgc1b657b">
<ul class="org-ul">
<li>A program called Wise exports an excel document with lots of part numbers.</li>
<li>My script takes this excel document, removes unnecessary part
numbers(defined in another file) and outputs a .txt file that I can
later use for software called PHATS. This tool is crucial, prevents
a lot of manual labor.</li>
</ul>

<p>
Making functions.py file as an executable so it is more convenient for
operators to use this script(double click it and go).
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-pkc.html">Pkc</a> </div>]]></description>
  <category><![CDATA[Pkc]]></category>
  <link>https://arvydasg.github.io/2022-07-31-python-data-cleaner-with-python.html</link>
  <guid>https://arvydasg.github.io/2022-07-31-python-data-cleaner-with-python.html</guid>
  <pubDate>Sun, 31 Jul 2022 19:32:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[My IT journey]]></title>
  <description><![CDATA[

<figure id="orga67e44d">
<img src="./static/images/bali.png" alt="bali.png" width="1200px">

</figure>

<div id="outline-container-org9ee9dd0" class="outline-2">
<h2 id="org9ee9dd0">June 23rd 2022 - Promotion</h2>
<div class="outline-text-2" id="text-org9ee9dd0">
<p>
Offered to be promoted to IT Engineer, manager agreed. Exactly a month
later was told that that’s not going to happen.
</p>
</div>
</div>

<div id="outline-container-orgc5f0a6a" class="outline-2">
<h2 id="orgc5f0a6a">June 19th 2022 - Want to code</h2>
<div class="outline-text-2" id="text-orgc5f0a6a">
<p>
Tired of running though the factory fixing printers - want to program
again.
</p>
</div>
</div>

<div id="outline-container-org3caa65b" class="outline-2">
<h2 id="org3caa65b">April 11th 2022 - First IT job</h2>
<div class="outline-text-2" id="text-org3caa65b">
<p>
Starting my first IT job ever as an IT Technician in my home town
Panevezys.
</p>
</div>
</div>

<div id="outline-container-org94515d3" class="outline-2">
<h2 id="org94515d3">Sep 2021 - Self employed web dev</h2>
<div class="outline-text-2" id="text-org94515d3">
<p>
Making wordpress sites for clients. Initially with Elementor, then
oxygen builder, but at the end realizing that all those builders are
not for me, I want to code. That is when I started building various
sites with Django.
</p>

<p>
Got hooked on Emacs. I am not going back to any other code editor. It
is everything, my code editor, my text reader, my calendar, my to-do
tool, my note taking app, my second brain, my website… and so on.
</p>
</div>
</div>

<div id="outline-container-org09e993b" class="outline-2">
<h2 id="org09e993b">January 2021 - Going all in</h2>
<div class="outline-text-2" id="text-org09e993b">
<p>
Starting to learn programming with Machine learning course on
Coursera. Trying to find the best code editor.. trying out VIM and
loving it. So many shortcuts - I can jump though things swiftly. Feels
like Revit or some kind of video game(World of Warcraft).
</p>

<p>
Doing code in place python project.
</p>

<p>
Deciding that I also don’t want to use Windows as my primary operating
system. Switching to Linux. Trying out different distros, installing
and reinstalling them dozen of times… finally settling down with
Ubuntu.
</p>
</div>
</div>

<div id="outline-container-org370f50a" class="outline-2">
<h2 id="org370f50a">April 2020 - The idea to program</h2>
<div class="outline-text-2" id="text-org370f50a">
<p>
Quarantine in Bali. Lying in bed. Realizing that I would like to have
a job I can do remotely. I was a computer guy my whole life, playing
mostly, but also fixing minor problems.. Never calling an IT guy to
fix something - always doing it myself.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2022-07-22-my-it-journey.html</link>
  <guid>https://arvydasg.github.io/2022-07-22-my-it-journey.html</guid>
  <pubDate>Fri, 22 Jul 2022 20:17:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Magicmirror]]></title>
  <description><![CDATA[

<figure id="orgaf9f5a8">
<img src="./static/images/magicmirror.png" alt="magicmirror.png" width="1200px">

</figure>

<div id="outline-container-org6150fa6" class="outline-2">
<h2 id="org6150fa6">The idea</h2>
<div class="outline-text-2" id="text-org6150fa6">
<p>
Found an unused raspberry pi at work. Was wondering what it would be
like to use it for something useful… One of the projects I liked was
“MagicMirror".
</p>

<p>
What you need:
</p>

<ul class="org-ul">
<li>Raspberry pi</li>
<li>Free monitor</li>
</ul>

<p>
Follow a well written tutorial(<a href="https://www.youtube.com/watch?v=OYlloiaBINo&amp;ab_channel=BreakItYourself">I watched something like this I think</a>)
and make it work to your liking.
</p>

<p>
In case you wonder where to get modules for your MagicMirror - <a href="https://github.com/MichMich/MagicMirror/wiki/3rd-Party-Modules">check</a>.
</p>

<p>
Some modules are outdated, so keep that in mind if something does not
work. (like Spanish word of the day in my case. It worked for a month
or so at first).
</p>

<p>
This setup barely uses any electricity(if your monitor is not super
old), so I would say its quite convenient. We constantly keep an eye
on it.
</p>
</div>
</div>

<div id="outline-container-org824f4d0" class="outline-2">
<h2 id="org824f4d0">Current setup</h2>
<div class="outline-text-2" id="text-org824f4d0">

<figure id="org35e1932">
<img src="./static/images/magicmirror-calendar.png" alt="magicmirror-calendar.png" width="1200px">

</figure>

<p>
Currently displaying google calendar and some other relevant
information. Displaying one google calendar that I use together with
my family members so we are all up to date with the upcoming events.
</p>
</div>
</div>

<div id="outline-container-org28ccbfc" class="outline-2">
<h2 id="org28ccbfc">Future Ideas</h2>
<div class="outline-text-2" id="text-org28ccbfc">
<p>
One day I want to learn how to work with API’s so I can pull my weight
data from “Google Fit” and display in MagicMirror.
</p>

<p>
Or… I could scrape cvbankas.lt and make MagicMirror display all the
job adds that contained word “Python” in it.
</p>

<p>
I have many ideas like such :)
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2022-07-12-magicmirror.html</link>
  <guid>https://arvydasg.github.io/2022-07-12-magicmirror.html</guid>
  <pubDate>Tue, 12 Jul 2022 19:46:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[First month as IT Technician]]></title>
  <description><![CDATA[

<figure id="orgd37a108">
<img src="./static/images/pkc-technician.png" alt="pkc-technician.png" width="1200px">

</figure>

<div id="outline-container-org427d42d" class="outline-2">
<h2 id="org427d42d">Intro</h2>
<div class="outline-text-2" id="text-org427d42d">
<p>
Hello,
</p>

<p>
So this is supposed to be a post about my first time as IT technician, but almost 2 months have passed and I still haven’t found the time to write it. But here it is, let’s get straight into it.
</p>

<p>
My first IT job experience. Got accepted to do two other jobs in this company, but I firmly stated that I want to be in IT field, even if it meant that I will be fixing printers. You know, I think it would be easier for me to list down some points about these months, like braindump and whenever someone wants to know more about it - I will share more info. I can write a huge paper about those months, but it would take just too much of my precious time. Let’s go:
</p>

<ul class="org-ul">
<li>Dude has decades of experience</li>
<li>Just ask to buy a new printer</li>
<li>Get your hands off me, we are conservative</li>
<li>Are these guys here part time or full time</li>
<li>Boss on vacation, who is going to take the jobs?</li>
<li>Printer master</li>
<li>Why not let everyone know that you are about to yawn</li>
<li>Amazing people working as operators</li>
<li>Remote connection to computers</li>
<li>Amazed about AD, group policies, o365 interconnection of everything</li>
<li>There is no one that can not be replaced</li>
<li>Nera nepakeiciamu, yra tik nepakeisti Just try to blow on it</li>
<li>Phats master</li>
<li>Digitalboard master</li>
<li>Boss forever busy</li>
<li>Support company</li>
<li>Passwords on shared drive</li>
<li>taking over wise things</li>
<li>Jira</li>
<li>Klaipeda</li>
<li>Cant find IT engineers in Panevezys, offered myself to be trained, agreed</li>
<li>So yeah, I already learned a lot. From what the IT field actually is to how to work with a group of people(didn’t really have this experience yet), how to work in a large company and so on.. My travels really didn’t teach me about it, so I am happy I am learning about it now.</li>
</ul>

<p>
Currently <span class="timestamp-wrapper"><span class="timestamp">[2022-07-03 Sun] </span></span> I am still an IT Technician that got offered
to be trained to become an IT Engineer. I am happy about it, because I
will get more time to use my head rather than my feet running from one
place to another. Hopefully I will learn about servers, AD, o365,
virtual machines, backups
</p>

<p>
At the same time, in the evenings I would like to be doing <a href="https://github.com/ossu/computer-science">this</a> course
instead of a physical 3 year course that I could be doing in my
hometown remotely after work. Thanks Remigijus for the advise. At he
same time I would like to watch as many of <a href="https://www.youtube.com/user/itfreetraining">these</a> videos as possible.
</p>

<p>
Anyway, there is a lot of learn! Maybe it is not a programming field,
but I think knowledge about servers and how large companies work is
quite useful to know and then someday I can switch to doing more
programming work, but for now this opportunity is good enough as a
first IT job.
</p>

<p>
Happy I wrote this. Going to watch some news with my bb :)
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-pkc.html">Pkc</a> </div>]]></description>
  <category><![CDATA[Pkc]]></category>
  <link>https://arvydasg.github.io/2022-07-03-first-month-as-it-technician.html</link>
  <guid>https://arvydasg.github.io/2022-07-03-first-month-as-it-technician.html</guid>
  <pubDate>Sun, 03 Jul 2022 19:18:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Django Tags]]></title>
  <description><![CDATA[

<figure id="org36499d9">
<img src="./static/images/django_tags.png" alt="django_tags.png" width="1200px">

</figure>

<div id="outline-container-org251dfb6" class="outline-2">
<h2 id="org251dfb6">Intro</h2>
<div class="outline-text-2" id="text-org251dfb6">
<p>
Alright, I will just write all the thoughts in my head for now. I am
too excited that I managed tags to work on this site!
</p>

<p>
The idea was to have page with Blogposts and list all the posts in it.
Then, when I click on the posts, I wanted to be able to read it. Then,
if I click on any tags associated with that posts, I wanted to get a
list of other posts with the same tags.
</p>

<p>
This task proved to be a 2 day headache for me, django novice dude. I
have seen people using djangotaggit package, but dint want myself to
get involved in it, since I knew that somehow, it should be possible
to create this functionality by django itself.
</p>
</div>
</div>

<div id="outline-container-org88e566e" class="outline-2">
<h2 id="org88e566e">Body</h2>
<div class="outline-text-2" id="text-org88e566e">
<p>
I am not even sure what part of code I should share here.. I want to
share all the steps that took me to reach the result, but that would
just be a too long post and this blog is not even finished yet, so
yeah… let me just share a key piece.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #fb4934;">def</span> <span style="color: #b8bb26;">tag</span><span style="color: #fe8019;">(</span>request, pk_test<span style="color: #fe8019;">)</span>:
  <span style="color: #83a598;">tag</span> = Tag.objects.get<span style="color: #fe8019;">(</span><span style="color: #fe8019;">id</span>=pk_test<span style="color: #fe8019;">)</span>
  <span style="color: #928374;"># </span><span style="color: #928374;">postauskai = Blog_post.objects.filter(tags__name='emacs')</span>
  postauskai = tag.blog_post_set.<span style="color: #fe8019;">all</span><span style="color: #fe8019;">()</span>
  context = <span style="color: #fe8019;">{</span><span style="color: #b8bb26;">'tag'</span>: tag, <span style="color: #b8bb26;">'postauskai'</span>: postauskai<span style="color: #fe8019;">}</span>

  <span style="color: #fb4934;">return</span> render<span style="color: #fe8019;">(</span>request, <span style="color: #b8bb26;">'base/tag.html'</span>, context<span style="color: #fe8019;">)</span>
</pre>
</div>

<p>
This, above, is my final result. First of all, this piece:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #83a598;">postauskai</span> = Blog_post.objects.<span style="color: #fe8019;">filter</span><span style="color: #fe8019;">(</span>tags__name=<span style="color: #b8bb26;">'emacs'</span><span style="color: #fe8019;">)</span>
</pre>
</div>

<p>
After a day of fiddling, using this line I have finally managed to
output SOMETHING into the tag.html template. Now I could filter by
tag. Was super happy about it. Learned that I can put as many things
in the context are as I want, as this video -Rendering Data to
Templates | Template Tags | Django (3.0) Crash Course Tutorials (pt 8)
has proved it to be possible.
</p>

<p>
Then I skimmed though another video of his in this playlist and
noticed that he is doing something very similar that I am trying to
achive. He wants to output all the orders of a single customer. Well,
that is exaclty what I want to do. Output all the posts of a single
tag. Digging through a few of his videos I have noticed him using
_setDatabase Model Queries | Django (3.0) Crash Course Tutorials (pt
7).That was it. It basically queries the childer on the thingie? Not
sure exactly how it works and what it does, but I knew this is the
thing for me right when I saw it.
</p>

<p>
I used it and vuolia. The posts that have a certain tag appeared
inside that tags page. AMAZING!!
</p>
</div>
</div>

<div id="outline-container-orgd3e09b5" class="outline-2">
<h2 id="orgd3e09b5">Final config</h2>
<div class="outline-text-2" id="text-orgd3e09b5">
<p>
I then had to step back and think how to make a link to that specific
blog post. This worked.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #fe8019;">{</span>% extends <span style="color: #b8bb26;">'app/main.html'</span> %<span style="color: #fe8019;">}</span>

<span style="color: #fe8019;">{</span>% block content %<span style="color: #fe8019;">}</span>
    &lt;h1&gt;<span style="color: #fe8019;">{</span><span style="color: #cc241d;">{</span>tag.name<span style="color: #cc241d;">}</span><span style="color: #fe8019;">}</span>&lt;/h1&gt;
    &lt;hr/&gt;
    <span style="color: #fe8019;">{</span>% <span style="color: #fb4934;">for</span> x <span style="color: #fb4934;">in</span> postauskai %<span style="color: #fe8019;">}</span>
        &lt;p&gt;<span style="color: #fe8019;">{</span><span style="color: #cc241d;">{</span>x.created|date:<span style="color: #b8bb26;">'Y-m-d'</span><span style="color: #cc241d;">}</span><span style="color: #fe8019;">}</span> - &lt;a <span style="color: #83a598;">href</span>=<span style="color: #b8bb26;">"{% url 'blog_post' x.id %}"</span>&gt;<span style="color: #fe8019;">{</span><span style="color: #cc241d;">{</span>x.title<span style="color: #cc241d;">}</span><span style="color: #fe8019;">}</span>&lt;/a&gt;&lt;/p&gt;
    <span style="color: #fe8019;">{</span>% endfor %<span style="color: #fe8019;">}</span>
<span style="color: #fe8019;">{</span>% endblock content %<span style="color: #fe8019;">}</span>
</pre>
</div>

<p>
AMAZING!! I am done and I can not believe I did it. Link to Github project.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2022-06-19-django-tags.html</link>
  <guid>https://arvydasg.github.io/2022-06-19-django-tags.html</guid>
  <pubDate>Sun, 19 Jun 2022 20:26:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Attempts to Blog]]></title>
  <description><![CDATA[

<figure id="org78497b7">
<img src="./static/images/emacsblog.png" alt="emacsblog.png" width="1200px">

</figure>

<div id="outline-container-orgeccf2ae" class="outline-2">
<h2 id="orgeccf2ae">Intro</h2>
</div>

<div id="outline-container-org33aded0" class="outline-2">
<h2 id="org33aded0">Body</h2>
<div class="outline-text-2" id="text-org33aded0">
</div>
<div id="outline-container-orgd4ec4de" class="outline-3">
<h3 id="orgd4ec4de">First attempts</h3>
<div class="outline-text-3" id="text-orgd4ec4de">
<p>
I was trying to do the same with my journey to programming. It started
a bit more than a year ago and since them I was trying to create
personal blog/website.
</p>

<ul class="org-ul">
<li>First with php - <a href="https://github.com/arvydasg/gvazdikelis">gvazdikelis</a></li>
<li>Then with hugo - <a href="https://github.com/arvydasg/arvydas.dev_hugo">arvydas.dev<sub>hugo</sub></a></li>
<li>Finally with django - <a href="https://github.com/arvydasg/django_blog">django<sub>blog</sub></a></li>
</ul>
</div>
</div>
</div>

<div id="outline-container-orgdbc93dd" class="outline-2">
<h2 id="orgdbc93dd">Current setup</h2>
<div class="outline-text-2" id="text-orgdbc93dd">
<p>
<span class="timestamp-wrapper"><span class="timestamp">[2022-04-17 Sun] </span></span> I discovered a way to make a website with emacs.
<a href="https://systemcrafters.net/publishing-websites-with-org-mode/">Systemcrafters channel</a> has a lot of great material covering just that.
</p>

<p>
I knew that this is the right way for me to blog, because:
</p>

<ul class="org-ul">
<li>I can use my emacs shortcuts to write and edit</li>
<li>I don’t need to reformat text to make it readable for something like CKEditor in python <a href="https://github.com/arvydasg/emacs_blog">django</a>. I can just straight up use emacs source blocks, headings, text blocks and so on and everything just works,</li>
<li>I can publish my blog just as easily wit <a href="https://magit.vc/">Magit</a>, push straight to Github and the changes will be visible immediately in my website,</li>
</ul>
</div>
</div>

<div id="outline-container-org8759b35" class="outline-2">
<h2 id="org8759b35">Summary</h2>
<div class="outline-text-2" id="text-org8759b35">
<p>
For me, this is the fastest way to blog. I will be using it in the
future and hopefully improve my workflow as I go along.
</p>

<p>
P.S. Update 2022-08-29. I am creating a hugo blog - AGAIN. Read why -
<a href="https://github.com/arvydasg/emacs_blog">here</a>.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <link>https://arvydasg.github.io/2022-06-19-attempts-to-blog.html</link>
  <guid>https://arvydasg.github.io/2022-06-19-attempts-to-blog.html</guid>
  <pubDate>Sun, 19 Jun 2022 20:04:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Dired diff-hl]]></title>
  <description><![CDATA[

<figure id="org1a8dfe5">
<img src="./static/images/dired-diff-hl.png" alt="dired-diff-hl.png" width="1200px">

</figure>

<div id="outline-container-orgea78d6e" class="outline-2">
<h2 id="orgea78d6e">Introduction</h2>
<div class="outline-text-2" id="text-orgea78d6e">
<p>
So, everything started when I have discovered ‘diff-hl’ package. It
had an option to show differences in dired buffer. I thought okay,
cool option, lets not use neotree anymore and use dired instead.
</p>
</div>
</div>

<div id="outline-container-orgad4b45b" class="outline-2">
<h2 id="orgad4b45b">Body</h2>
<div class="outline-text-2" id="text-orgad4b45b">
<p>
I added a few lines to ‘diff-hl’ config to make the file changes
visible in dired buffer.
</p>

<div class="org-src-container">
<pre class="src src-emacs-lisp"><span style="color: #fe8019;">(</span><span style="color: #fb4934;">use-package</span> <span style="color: #d3869b;">diff-hl</span>
  <span style="color: #fe8019;">:ensure</span> t
  <span style="color: #fe8019;">:init</span> <span style="color: #cc241d;">(</span>add-hook 'prog-mode-hook #'diff-hl-mode<span style="color: #cc241d;">)</span>
  <span style="color: #cc241d;">(</span>add-hook 'org-mode-hook #'diff-hl-mode<span style="color: #cc241d;">)</span>
  <span style="color: #cc241d;">(</span>add-hook 'dired-mode-hook 'diff-hl-dired-mode<span style="color: #cc241d;">)</span>
  <span style="color: #cc241d;">(</span>add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh<span style="color: #cc241d;">)</span>
  <span style="color: #cc241d;">(</span>add-hook 'magit-pre-refresh-hook 'diff-hl-magit-post-refresh<span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>
</pre>
</div>

<p>
I then watched some videos to remind myself of dired commands and
configs.
</p>

<p>
I saw a guy effortlessly jumping from one directory to another,
opening a file, opening a directory at point, opening another
directory, closing dired buffer with q and not complaining about many
opened buffers after he jumped between a few with dired.
</p>

<p>
First of all, I wanted the same behavior as ‘neotree’. I wanted to see
the current directory and its files with one keystroke. There original
one C-x d ASKS me for a directory. C-x C-d just list a directory -
didn’t understand this function. Then I discovered ‘jump-to-dir’ smth
like that, so I bind that to C-x C-d. Great, I can now open current
directory and see it’s files quickly.
</p>

<p>
Next issues - I could navigate dired buffers with f - forward q -
backwards. BUT if I wanted to quit, I could not do it, because q was
taken already.
</p>

<p>
Then on top of that I have discovered that after navigating through a
few directories, my buffer list gets cluttered with dired buffers of
visited files. That’s definitely a no-go, because I don’t want to
accidentally open dired buffer that is named the same as my file when
I am looking for a file.
</p>

<p>
To fix BOTH of these issues I have discovered
‘dired-find-alternate-file’ command. It is bound to ‘a’ and it opens a
file or directory WITHOUT creating a separate buffer for it. Great!
</p>

<p>
Then it also somehow leaves ‘q’ unused, so I can quit dired buffer
with that keystroke. Great!
</p>

<p>
Then I rebind ‘dired-find-alternate-file’ to ‘f’, because I find it
more convenient to cycle with and I am all set!
</p>
</div>
</div>

<div id="outline-container-org398a324" class="outline-2">
<h2 id="org398a324">The final config</h2>
<div class="outline-text-2" id="text-org398a324">
<div class="org-src-container">
<pre class="src src-emacs-lisp"> <span style="color: #fe8019;">(</span><span style="color: #fb4934;">use-package</span> <span style="color: #d3869b;">dired</span>
    <span style="color: #fe8019;">:ensure</span> nil                         <span style="color: #928374;">;</span><span style="color: #928374;">no need for t, because dired is built in</span>
    <span style="color: #fe8019;">:custom</span> <span style="color: #cc241d;">(</span><span style="color: #b8bb26;">(</span>dired-listing-switches <span style="color: #b8bb26;">"-agho --group-directories-first"</span><span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span> <span style="color: #928374;">;</span><span style="color: #928374;">sort directories first</span>
  <span style="color: #fe8019;">(</span>global-set-key <span style="color: #cc241d;">(</span>kbd <span style="color: #b8bb26;">"C-x C-d"</span><span style="color: #cc241d;">)</span> 'dired-jump<span style="color: #fe8019;">)</span> <span style="color: #928374;">;</span><span style="color: #928374;">open dired buffer in current location</span>
  <span style="color: #fe8019;">(</span>define-key dired-mode-map <span style="color: #cc241d;">(</span>kbd <span style="color: #b8bb26;">"f"</span><span style="color: #cc241d;">)</span> 'dired-find-alternate-file<span style="color: #fe8019;">)</span>
<span style="color: #928374;">;; </span><span style="color: #928374;">(global-set-key (kbd "C-x d") 'dired)</span>

  <span style="color: #928374;">;; </span><span style="color: #928374;">a function to kill dired buffers. Kind of works. Or you can use "a"</span>
  <span style="color: #928374;">;; </span><span style="color: #928374;">to cycle through dired and it leaves no buffers opened</span>
  <span style="color: #928374;">;; </span><span style="color: #928374;">DiredReuseDirectoryBuffer - https://www.emacswiki.org/emacs/DiredReuseDirectoryBuffer</span>
  <span style="color: #928374;">;; </span><span style="color: #928374;">KillingBuffers - https://www.emacswiki.org/emacs/KillingBuffers</span>
  <span style="color: #fe8019;">(</span><span style="color: #fb4934;">defun</span> <span style="color: #b8bb26;">kill-dired-buffers</span> <span style="color: #cc241d;">()</span>
    <span style="color: #cc241d;">(</span><span style="color: #fb4934;">interactive</span><span style="color: #cc241d;">)</span>
    <span style="color: #cc241d;">(</span>mapc <span style="color: #b8bb26;">(</span><span style="color: #fb4934;">lambda</span> <span style="color: #83a598;">(</span>buffer<span style="color: #83a598;">)</span>
            <span style="color: #83a598;">(</span><span style="color: #fb4934;">when</span> <span style="color: #8ec07c;">(</span>eq 'dired-mode <span style="color: #83a598;">(</span>buffer-local-value 'major-mode buffer<span style="color: #83a598;">)</span><span style="color: #8ec07c;">)</span>
              <span style="color: #8ec07c;">(</span>kill-buffer buffer<span style="color: #8ec07c;">)</span><span style="color: #83a598;">)</span><span style="color: #b8bb26;">)</span>
          <span style="color: #b8bb26;">(</span>buffer-list<span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>

  <span style="color: #928374;">;; </span><span style="color: #928374;">can easily check how many buffers got opened</span>
  <span style="color: #fe8019;">(</span><span style="color: #fb4934;">defun</span> <span style="color: #b8bb26;">kill-all-dired-buffers</span> <span style="color: #cc241d;">()</span>
    <span style="color: #dfd2b8;">"Kill all dired buffers."</span>
    <span style="color: #cc241d;">(</span><span style="color: #fb4934;">interactive</span><span style="color: #cc241d;">)</span>
    <span style="color: #cc241d;">(</span><span style="color: #fb4934;">save-excursion</span>
      <span style="color: #b8bb26;">(</span><span style="color: #fb4934;">let</span> <span style="color: #83a598;">(</span><span style="color: #8ec07c;">(</span>count 0<span style="color: #8ec07c;">)</span><span style="color: #83a598;">)</span>
        <span style="color: #83a598;">(</span><span style="color: #fb4934;">dolist</span> <span style="color: #8ec07c;">(</span>buffer <span style="color: #83a598;">(</span>buffer-list<span style="color: #83a598;">)</span><span style="color: #8ec07c;">)</span>
          <span style="color: #8ec07c;">(</span>set-buffer buffer<span style="color: #8ec07c;">)</span>
          <span style="color: #8ec07c;">(</span><span style="color: #fb4934;">when</span> <span style="color: #83a598;">(</span>equal major-mode 'dired-mode<span style="color: #83a598;">)</span>
            <span style="color: #83a598;">(</span><span style="color: #fb4934;">setq</span> count <span style="color: #cc241d;">(</span>1+ count<span style="color: #cc241d;">)</span><span style="color: #83a598;">)</span>
            <span style="color: #83a598;">(</span>kill-buffer buffer<span style="color: #83a598;">)</span><span style="color: #8ec07c;">)</span><span style="color: #83a598;">)</span>
        <span style="color: #83a598;">(</span>message <span style="color: #b8bb26;">"Killed %i dired buffer(s)."</span> count<span style="color: #83a598;">)</span><span style="color: #b8bb26;">)</span><span style="color: #cc241d;">)</span><span style="color: #fe8019;">)</span>
</pre>
</div>

<p>
Some killing buffers commands are just extras. Was using those when I
was testing out how many opened buffers there were. But luckily I
found ‘dired-find-alternate-file’ :)
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-emacs.html">Emacs</a> </div>]]></description>
  <category><![CDATA[Emacs]]></category>
  <link>https://arvydasg.github.io/2022-06-19-dired-diff-hl.html</link>
  <guid>https://arvydasg.github.io/2022-06-19-dired-diff-hl.html</guid>
  <pubDate>Sun, 19 Jun 2022 18:37:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[PKC company Wiki]]></title>
  <description><![CDATA[

<figure id="orgbc99f5d">
<img src="./static/images/pkcwiki.png" alt="pkcwiki.png" width="1200px">

</figure>

<div id="outline-container-org126e5db" class="outline-2">
<h2 id="org126e5db">What is it for</h2>
<div class="outline-text-2" id="text-org126e5db">
<p>
When I came to PKC - there was very little documentation about IT
processes. It had to be documented.
</p>

<p>
As I was already using Emacs for documenting my work with <a href="https://www.orgroam.com/">Org-roam</a>, I
simply had to make a website for it. The website itself was generated
thanks to <a href="https://github.com/arvydasg/pkc_wiki">this piece of code</a>.
</p>

<p>
I then put this website(html files) on server that is accessible to
colleagues so they can get inspiration whenever needed.
</p>

<p>
This project was mainly focused to my future colleagues.
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-pkc.html">Pkc</a> </div>]]></description>
  <category><![CDATA[Pkc]]></category>
  <link>https://arvydasg.github.io/2022-05-24-pkc-company-wiki.html</link>
  <guid>https://arvydasg.github.io/2022-05-24-pkc-company-wiki.html</guid>
  <pubDate>Tue, 24 May 2022 19:27:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Automated backups with Python and Selenium]]></title>
  <description><![CDATA[

<figure id="org09aee3b">
<img src="./static/images/ivbackups.png" alt="ivbackups.png" width="1200px">

</figure>

<div id="outline-container-org136e5cf" class="outline-2">
<h2 id="org136e5cf">About the project</h2>
<div class="outline-text-2" id="text-org136e5cf">
<p>
Since I don’t trust/understand automated backups of websites and I
would rather backup things myself, know where they are stored and what
is actually “backuped”, I create backups for my client sites manually.
The procedure is:
</p>

<p>
Open website Add username Add password .click Log in to client’s
hosting provider’s dashboard panel .click on the needed server .click
on directadmin panel .click on “atsargines kopijos” .click on
“generuoti atsargine kopija” .close tab .click log out REPEAT 3x times
</p>

<p>
10 clicks at least
</p>

<p>
And I prefer to have at least one backup for every client at least
once or twice a week for general maintenance.
</p>

<p>
When I want to do more modifications during the week, I like to make
backups more often. Same 10 click procedure every time…
</p>
</div>
</div>

<div id="outline-container-org9558a12" class="outline-2">
<h2 id="org9558a12">My idea</h2>
<div class="outline-text-2" id="text-org9558a12">
<p>
Since I have decided I want to slowly move away from Wordpress sites
(the work itself is meh, drag and drop interfaces, have to learn php
(when i prefer JS or Python), the competition is enormous (50
developers for one job), I don’t get to type nothing, losing my EMACS
skills..) to learn more of real programming. Learn what you like the
most, not what is needed most, right? And after half a year or so I
realized that I prefer coding instead of drag and drop WordPress
website building.
</p>
</div>
</div>

<div id="outline-container-orgf11c3a9" class="outline-2">
<h2 id="orgf11c3a9">Solution</h2>
<div class="outline-text-2" id="text-orgf11c3a9">
<p>
For a while now I have been thinking how cool it would be to automate
some tasks. A year ago that is why I started to learn coding, so I can
automate boring tasks!
</p>

<p>
So why not use Python to automate the process described above? It
should be quite simple, right?
</p>

<p>
After a looooong period of not touching text editors, I installed
emacs, configured it to my liking once again (my muscle memory
surprises me).
</p>

<p>
I then found out about selenium and it can be used to interact with
websites.
</p>

<p>
First I installed it and configured by watching some YouTube videos
and when it finally didn’t work out as expected I directed all of my
attention to the official docs -
<a href="https://selenium-python.readthedocs.io/getting-started.html">https://selenium-python.readthedocs.io/getting-started.html</a>
</p>

<p>
Then I insalled python venv to organize my packages better? But I
already had them installed in my whole system, so kind of not needed I
guess, but good to remember from the Django times and to know for the
future.
</p>

<p>
Got a correct chrome driver. In my version it was - version
96.0.4664.45
</p>

<p>
Any deprecation errors were fixed by this -
<a href="https://stackoverflow.com/questions/69875125/find-element-by-commands-are-deprecated-in-selenium">https://stackoverflow.com/questions/69875125/find-element-by-commands-are-deprecated-in-selenium</a>
</p>
</div>
</div>

<div id="outline-container-orgbcfeafb" class="outline-2">
<h2 id="orgbcfeafb">What I learned</h2>
<div class="outline-text-2" id="text-orgbcfeafb">
<ul class="org-ul">
<li>What is a webdriver</li>
<li>How to open a webpage with Selenium</li>
<li>How to login into a page with Selenium</li>
<li>How to scroll with selenium - <a href="https://stackoverflow.com/questions/20986631/how-can-i-scroll-a-web-page-using-selenium-webdriver-in-python">https://stackoverflow.com/questions/20986631/how-can-i-scroll-a-web-page-using-selenium-webdriver-in-python</a></li>
<li>how to click on all kinds of web elements with Selenium</li>
<li>how to create a function with Python</li>
<li>How to return a value from a function with Python</li>
<li>How to reuse a returned function in another function with Python - <a href="https://www.youtube.com/watch?v=nuNXiEDnM44">https://www.youtube.com/watch?v=nuNXiEDnM44</a> (had to also go back to my CodeInPlace course for a reference)</li>
<li>How to use an external config file to store values for a python function to use (so the passwords and usernames I use in a function wouldn’t be visible to you ;&gt; ) - <a href="https://www.youtube.com/watch?v=Gdw0-QGq-z0">https://www.youtube.com/watch?v=Gdw0-QGq-z0</a></li>
<li>How to run multiple python scripts from one one bash file</li>
</ul>
</div>
</div>

<div id="outline-container-orgc44f7a9" class="outline-2">
<h2 id="orgc44f7a9">Known bugs</h2>
<div class="outline-text-2" id="text-orgc44f7a9">
<p>
Doesn’t close browser windows after each script runs (not a biggie,
everything still works, might fix later)
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-pkc.html">Pkc</a> </div>]]></description>
  <category><![CDATA[Pkc]]></category>
  <link>https://arvydasg.github.io/2022-04-10-automated-backups-with-python-and-selenium.html</link>
  <guid>https://arvydasg.github.io/2022-04-10-automated-backups-with-python-and-selenium.html</guid>
  <pubDate>Sun, 10 Apr 2022 20:01:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[CRUD Django app for DPD]]></title>
  <description><![CDATA[

<figure id="org168da44">
<img src="./static/images/dpd.png" alt="dpd.png" width="1200px">

</figure>

<div id="outline-container-orgde72e87" class="outline-2">
<h2 id="orgde72e87">What is it for</h2>
<div class="outline-text-2" id="text-orgde72e87">
<p>
This project was created by me for me, with an idea to share it with
my colleagues at <a href="https://www.dpd.com/lt/lt">https://www.dpd.com/lt/lt</a> The couriers are not happy
with their salaries, they are not sure if they are calculated properly
according to many factors that DPD tells about. This leads to couriers
writing down numbers of packages they have delivered, collected,
kilometers they have driven and so on.. Every day, after each shift.
And all this additional work and accounting because they can not trust
their employers. I thought I will create this app so it can be used by
couriers to track their data easier and in one place.
</p>
</div>
</div>

<div id="outline-container-org044488a" class="outline-2">
<h2 id="org044488a">How it works</h2>
<div class="outline-text-2" id="text-org044488a">
<p>
A user logs in, gets a posibility to add a daily record with all the
needed options for a courier. When he is done, a record is saved. It
can also be edited if needed right on the website, no need to go to
the django admin.
</p>

<p>
This is a django app that is hosted on github and heroku.
</p>
</div>
</div>

<div id="outline-container-org0a0637d" class="outline-2">
<h2 id="org0a0637d">Docs</h2>
<div class="outline-text-2" id="text-org0a0637d">
<p>
Learned a lot during this tutorial - <a href="https://www.youtube.com/watch?v=llbtoQTt4qw">https://www.youtube.com/watch?v=llbtoQTt4qw</a>
</p>

<p>
GitHub link to the tutorial project - <a href="https://github.com/divanov11/Django-To-Do-list-with-user-authentication">https://github.com/divanov11/Django-To-Do-list-with-user-authentication</a>
</p>

<p>
Classy Class-Based Views. - <a href="http://ccbv.co.uk/">http://ccbv.co.uk/</a>
</p>

<p>
Built-in class-based views API - <a href="https://docs.djangoproject.com/en/3.1/ref/class-based-views/">https://docs.djangoproject.com/en/3.1/ref/class-based-views/</a>
</p>

<p>
Class based views? Users
</p>

<p>
Applied this tutorial for my own project.
</p>
</div>
</div>

<div id="outline-container-org08062ac" class="outline-2">
<h2 id="org08062ac">Deploy</h2>
<div class="outline-text-2" id="text-org08062ac">
<p>
Excellent explanation of how to deploy django app with Heroku -
<a href="https://www.youtube.com/watch?v=6DI_7Zja8Zc">https://www.youtube.com/watch?v=6DI_7Zja8Zc</a>
</p>

<p>
Live website - <a href="https://dpd2022.herokuapp.com">https://dpd2022.herokuapp.com</a>
</p>
</div>
</div>

<div id="outline-container-org847cdd7" class="outline-2">
<h2 id="org847cdd7">Summary</h2>
<div class="outline-text-2" id="text-org847cdd7">
<p>
Nice and useful little app. Would still be using it if I was working in DPD still.
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2022-02-08-crud-django-app-for-dpd.html</link>
  <guid>https://arvydasg.github.io/2022-02-08-crud-django-app-for-dpd.html</guid>
  <pubDate>Tue, 08 Feb 2022 18:41:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Facebook automation with Django]]></title>
  <description><![CDATA[

<figure id="orga216031">
<img src="./static/images/facebook-django.gif" alt="facebook-django.gif" width="1200px">

</figure>

<div id="outline-container-orgc7f61ff" class="outline-2">
<h2 id="orgc7f61ff">What is it for</h2>
<div class="outline-text-2" id="text-orgc7f61ff">
<p>
A recently started smoothie drink powder business that is testing
itself out in the field. Instead of purchasing ads on facebook, the
client first wanted to post their content to various facebook groups
to see the engagement. Over time this tasks proved to be too tedious,
since it requires a lot of manual clicking.
</p>

<p>
I have decided to help them out by creating this automation bot that
posts to various facebook groups by itself, with client needing to
click only a few clicks. There were various facebook bots on the
internet, but you had to pay fro those. It was interesting for me to
see if I can create something like it myself.
</p>
</div>
</div>

<div id="outline-container-orgd558af0" class="outline-2">
<h2 id="orgd558af0">How it works</h2>
<div class="outline-text-2" id="text-orgd558af0">
<p>
All the user need is a link to the facebook post and a call to action
message. He then needs to input these two into the browser window and
click start. Application does the rest. Taking the data from the
groups file, going through each and every one of them and posting the
choosen content (link, ad description and a call to action message).
Leave it running, come back after a white - inspect the terminal
windows - see how many successful group posts this app has done.
</p>
</div>
</div>

<div id="outline-container-org5fb01b2" class="outline-2">
<h2 id="org5fb01b2">Cons</h2>
<div class="outline-text-2" id="text-org5fb01b2">
<p>
There are a few cons of using this script.
</p>

<ul class="org-ul">
<li>You can not really use the computer while it runs since it
occupiesyour mouse and you shouldn’t be clicking on other windows
while it is running. You can run this script while you are having a
break, step away from your computer for 15min or so and come back
with having your post shared to 30 or so groups.</li>

<li>Your facebook account gets restricted. Often. If you are posting to
too many groups at a time. 20 or so is fine, but more than that (in
one sitting) and you are risking to get a temporary ban by facebook.</li>
</ul>
</div>
</div>

<div id="outline-container-orgb175681" class="outline-2">
<h2 id="orgb175681">What to fix</h2>
<div class="outline-text-2" id="text-orgb175681">
<ul class="org-ul">
<li>if the script breaks - take a screenshot of the whole screen (easier to debug what happened)</li>
<li>when the script finishes posting to one group - take a screenshot (easier to track the activity)</li>
<li>If group has pending posts - stop the for loop, run next group</li>
<li>Rebuild facebook<sub>django</sub> app with modules</li>
</ul>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-django.html">Django</a> </div>]]></description>
  <category><![CDATA[Django]]></category>
  <link>https://arvydasg.github.io/2022-02-05-facebook-automation-with-django.html</link>
  <guid>https://arvydasg.github.io/2022-02-05-facebook-automation-with-django.html</guid>
  <pubDate>Sat, 05 Feb 2022 19:14:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[SmutiFruti E-shop]]></title>
  <description><![CDATA[

<figure id="org12610fb">
<img src="./static/images/smutifruti.png" alt="smutifruti.png" width="1200px">

</figure>

<div id="outline-container-org6f267b1" class="outline-2">
<h2 id="org6f267b1">Powdered smoothies E-shop</h2>
<div class="outline-text-2" id="text-org6f267b1">
<p>
E-shop build with <a href="https://wordpress.com/">Wordpress</a> and <a href="https://oxygenbuilder.com/">Oxygen Builder</a>.
</p>

<p>
Link to e-shop - Smutifruti.lt
</p>
</div>
</div>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-wordpress.html">Wordpress</a> </div>]]></description>
  <category><![CDATA[Wordpress]]></category>
  <link>https://arvydasg.github.io/2021-11-08-smutifruti-e-shop.html</link>
  <guid>https://arvydasg.github.io/2021-11-08-smutifruti-e-shop.html</guid>
  <pubDate>Mon, 08 Nov 2021 19:23:00 +0200</pubDate>
</item>
<item>
  <title><![CDATA[Julija Consulting]]></title>
  <description><![CDATA[

<figure id="org84c24a6">
<img src="./static/images/julijaconsulting.gif" alt="julijaconsulting.gif" width="1200px">

</figure>

<p>
A custom webpage build for a food production consultancy firm. Used
Wordpress and Oxygen Builder.
</p>

<p>
Link to site - <a href="https://julija.consulting/">https://julija.consulting/</a>
</p>
<div class="taglist"><a href="https://arvydasg.github.io/tags.html">Tags</a>: <a href="https://arvydasg.github.io/tag-wordpress.html">Wordpress</a> </div>]]></description>
  <category><![CDATA[Wordpress]]></category>
  <link>https://arvydasg.github.io/2021-08-05-julija-consulting.html</link>
  <guid>https://arvydasg.github.io/2021-08-05-julija-consulting.html</guid>
  <pubDate>Thu, 05 Aug 2021 19:53:00 +0300</pubDate>
</item>
<item>
  <title><![CDATA[Obelsdumas E-shop]]></title>
  <description><![CDATA[

<figure id="org2d048d4">
<img src="./static/images/obelsdumas.png" alt="obelsdumas.png" width="1200px">

</figure>

<div id="outline-container-org65b92b0" class="outline-2">
<h2 id="org65b92b0">Home made meat product e-shop</h2>
<div class="outline-text-2" id="text-org65b92b0">
<p>
My first Webev client project. Build with Wordpress.
</p>

<p>
<a href="https://obelsdumas.lt/">https://obelsdumas.lt/</a>
</p>
</div>
</div>
<div class="taglist"></div>]]></description>
  <link>https://arvydasg.github.io/2021-04-14-obelsdumas-e-shop.html</link>
  <guid>https://arvydasg.github.io/2021-04-14-obelsdumas-e-shop.html</guid>
  <pubDate>Wed, 14 Apr 2021 19:35:00 +0300</pubDate>
</item>
</channel>
</rss>
